# -*- coding: utf-8 -*-
"""SCOA5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkrW7mVMCruKU0yszW3n9b4eJm8PXPRR
"""

import numpy as np

class SLP:
  def __init__(self, n):
    self.w = np.zeros((n))
    self.b = 0

  def __activation(self, x):
    return 1 if x >= 0 else 0

  def __train(self, X, y, lr):
    y_hat = self.__activation(np.dot(self.w, X) + self.b)
    delta_w = lr * (y - y_hat) * X
    self.w += delta_w
    self.b += lr * (y - y_hat)

  def fit(self, X, y, learning_rate, epochs = 5):
    for _ in range(epochs):
      for i in range(len(X)):
        self.__train(X[i], y[i], learning_rate)

  def predict(self, X):
    preds = []
    for x in X:
      y_hat = self.__activation(np.dot(self.w, x) + self.b)
      preds.append(y_hat)
    return preds

"""## **OR GATE**"""

X = np.array([
              [0, 0],
              [0, 1],
              [1, 0],
              [1, 1]
])
y = np.array([0, 1, 1, 1])

or_gate = SLP(2)

or_gate.fit(X, y, learning_rate = 0.5, epochs = 5)

or_gate.predict(X)

print(f'Weights: {or_gate.w}, Bias: {or_gate.b}')

"""## **AND GATE**"""

X = np.array([
              [0, 0],
              [0, 1],
              [1, 0],
              [1, 1]
])
y = np.array([0, 0, 0, 1])

and_gate = SLP(2)

and_gate.fit(X, y, learning_rate = 0.5, epochs = 5)

and_gate.predict(X)

print(f'Weights: {and_gate.w}, Bias: {and_gate.b}')

"""## **NOT GATE**"""

X = np.array([
              [0],
              [1],
])
y = np.array([1, 0])

not_gate = SLP(1)

not_gate.fit(X, y, learning_rate = 0.5, epochs = 5)

not_gate.predict(X)

print(f'Weights: {not_gate.w}, Bias: {not_gate.b}')