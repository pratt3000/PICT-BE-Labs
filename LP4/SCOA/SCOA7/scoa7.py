# -*- coding: utf-8 -*-
"""SCOA7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11mDA0U_jrLqtk-Mwikid5rDdf2-22OaN
"""

import numpy as np

class NeuralNetwork:
  def __init__(self, input_nodes, hidden_nodes):
    self.layers = [input_nodes, hidden_nodes, 1]
    self.__init_weights()

  def __init_weights(self):
    self.W = np.array([None for _ in range(len(self.layers) - 1)])
    self.b = np.array([None for _ in range(len(self.layers) - 1)])
    for i in range(len(self.layers) - 1):
      self.W[i] = np.ones((self.layers[i+1], self.layers[i]))
      self.b[i] = np.zeros((self.layers[i+1]))

  def __train(self, X, y):
    a = np.array([None for _ in range(len(self.layers) - 1)])
    a[0] = X.copy()
    a[1] = np.dot(self.W[0], a[0]) + self.b[0]
    
    self.W[1] -= -a[1]
    self.b[1] -= -1
    for i in range(len(a[0])):
      self.W[0][:, i] -= -np.sum(self.W[1] * a[0][i], axis = 0)
    self.b[0] -= -1

  def fit(self, X, y):
    for i in range(len(X)):
      self.__train(X[i], y[i])

model = NeuralNetwork(2, 2)

model.fit([
           np.array([1, 0])
], [1])

print(f'Value of W11: {model.W[0][0,0]}')